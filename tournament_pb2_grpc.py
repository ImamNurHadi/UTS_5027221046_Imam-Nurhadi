# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import tournament_pb2 as tournament__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tournament_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class TournamentRegistrationStub(object):
    """Define the TournamentRegistration service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterPlayer = channel.unary_unary(
                '/tournament.TournamentRegistration/RegisterPlayer',
                request_serializer=tournament__pb2.Player.SerializeToString,
                response_deserializer=tournament__pb2.Player.FromString,
                _registered_method=True)
        self.ReadPlayersByTeam = channel.unary_unary(
                '/tournament.TournamentRegistration/ReadPlayersByTeam',
                request_serializer=tournament__pb2.TeamPlayersRequest.SerializeToString,
                response_deserializer=tournament__pb2.PlayerResponse.FromString,
                _registered_method=True)
        self.UpdatePlayer = channel.unary_unary(
                '/tournament.TournamentRegistration/UpdatePlayer',
                request_serializer=tournament__pb2.UpdatePlayerRequest.SerializeToString,
                response_deserializer=tournament__pb2.Player.FromString,
                _registered_method=True)
        self.DeletePlayer = channel.unary_unary(
                '/tournament.TournamentRegistration/DeletePlayer',
                request_serializer=tournament__pb2.DeletePlayerRequest.SerializeToString,
                response_deserializer=tournament__pb2.Player.FromString,
                _registered_method=True)
        self.CreateBracket = channel.unary_unary(
                '/tournament.TournamentRegistration/CreateBracket',
                request_serializer=tournament__pb2.CreateBracketRequest.SerializeToString,
                response_deserializer=tournament__pb2.BracketResponse.FromString,
                _registered_method=True)
        self.ScheduleMatch = channel.unary_unary(
                '/tournament.TournamentRegistration/ScheduleMatch',
                request_serializer=tournament__pb2.ScheduleMatchRequest.SerializeToString,
                response_deserializer=tournament__pb2.ScheduleMatchResponse.FromString,
                _registered_method=True)


class TournamentRegistrationServicer(object):
    """Define the TournamentRegistration service
    """

    def RegisterPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadPlayersByTeam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBracket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TournamentRegistrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterPlayer,
                    request_deserializer=tournament__pb2.Player.FromString,
                    response_serializer=tournament__pb2.Player.SerializeToString,
            ),
            'ReadPlayersByTeam': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadPlayersByTeam,
                    request_deserializer=tournament__pb2.TeamPlayersRequest.FromString,
                    response_serializer=tournament__pb2.PlayerResponse.SerializeToString,
            ),
            'UpdatePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePlayer,
                    request_deserializer=tournament__pb2.UpdatePlayerRequest.FromString,
                    response_serializer=tournament__pb2.Player.SerializeToString,
            ),
            'DeletePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePlayer,
                    request_deserializer=tournament__pb2.DeletePlayerRequest.FromString,
                    response_serializer=tournament__pb2.Player.SerializeToString,
            ),
            'CreateBracket': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBracket,
                    request_deserializer=tournament__pb2.CreateBracketRequest.FromString,
                    response_serializer=tournament__pb2.BracketResponse.SerializeToString,
            ),
            'ScheduleMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleMatch,
                    request_deserializer=tournament__pb2.ScheduleMatchRequest.FromString,
                    response_serializer=tournament__pb2.ScheduleMatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tournament.TournamentRegistration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TournamentRegistration(object):
    """Define the TournamentRegistration service
    """

    @staticmethod
    def RegisterPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tournament.TournamentRegistration/RegisterPlayer',
            tournament__pb2.Player.SerializeToString,
            tournament__pb2.Player.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadPlayersByTeam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tournament.TournamentRegistration/ReadPlayersByTeam',
            tournament__pb2.TeamPlayersRequest.SerializeToString,
            tournament__pb2.PlayerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tournament.TournamentRegistration/UpdatePlayer',
            tournament__pb2.UpdatePlayerRequest.SerializeToString,
            tournament__pb2.Player.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tournament.TournamentRegistration/DeletePlayer',
            tournament__pb2.DeletePlayerRequest.SerializeToString,
            tournament__pb2.Player.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateBracket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tournament.TournamentRegistration/CreateBracket',
            tournament__pb2.CreateBracketRequest.SerializeToString,
            tournament__pb2.BracketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScheduleMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tournament.TournamentRegistration/ScheduleMatch',
            tournament__pb2.ScheduleMatchRequest.SerializeToString,
            tournament__pb2.ScheduleMatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
